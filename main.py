import logging
import logging.config
import threading
import time as time_module
import socket
import sys
import gzip
import os
import datetime as dt
from config import LOG_CONFIG, States, LOG_FILE_PATH, TOKEN, ADMIN_ID
from handlers import *
from telegram.ext import (
    Application, CommandHandler, ConversationHandler,
    MessageHandler, filters, PicklePersistence
)
from telegram import Bot, Update
from telegram.error import (Conflict, NetworkError, RetryAfter,
                           TimedOut, BadRequest, Forbidden,
                           ChatMigrated, TelegramError)
import locale
import atexit

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª–∏
try:
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
except locale.Error:
    pass

# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
class SafeLogHandler:
    def __init__(self, filename, backup_count=7):
        self.filename = filename
        self.backup_count = backup_count
        self.current_file = None
        self.current_day = dt.datetime.now().strftime("%Y-%m-%d")
        self.lock = threading.Lock()
        self.initialize_logging()

    def initialize_logging(self):
        dirname = os.path.dirname(self.filename)
        if dirname and not os.path.exists(dirname):
            try:
                os.makedirs(dirname, exist_ok=True)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤: {e}")

        logging.config.dictConfig(LOG_CONFIG)
        self.logger = logging.getLogger()

        for handler in self.logger.handlers[:]:
            if isinstance(handler, logging.FileHandler):
                handler.close()
                self.logger.removeHandler(handler)

        try:
            self.current_file = open(self.filename, 'a', encoding='utf-8')
            handler = logging.StreamHandler(self.current_file)
            handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
            self.logger.addHandler(handler)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
            self.logger.addHandler(console_handler)

        self.monitor_thread = threading.Thread(target=self.log_monitor, daemon=True)
        self.monitor_thread.start()

    def log_monitor(self):
        while True:
            try:
                today = dt.datetime.now().strftime("%Y-%m-%d")
                if today != self.current_day:
                    with self.lock:
                        self.rotate_logs()
                        self.current_day = today
                time_module.sleep(60)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –ª–æ–≥–æ–≤: {e}")
                time_module.sleep(300)

    def rotate_logs(self):
        try:
            if self.current_file:
                self.current_file.close()

            if os.path.exists(self.filename):
                new_name = f"{self.filename}.{self.current_day}"

                for _ in range(5):
                    try:
                        os.rename(self.filename, new_name)
                        break
                    except PermissionError:
                        time_module.sleep(1)
                else:
                    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")
                    return

                self.compress_file(new_name)

            self.current_file = open(self.filename, 'a', encoding='utf-8')

            for handler in self.logger.handlers[:]:
                if isinstance(handler, logging.StreamHandler) and hasattr(handler, 'stream') and handler.stream == self.current_file:
                    self.logger.removeHandler(handler)

            new_handler = logging.StreamHandler(self.current_file)
            new_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
            self.logger.addHandler(new_handler)

            self.cleanup_old_logs()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")
            try:
                self.current_file = open(self.filename, 'a', encoding='utf-8')
            except:
                pass

    def compress_file(self, filename):
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f_in:
                    content = f_in.read()

                with gzip.open(f"{filename}.gz", 'wt', encoding='utf-8') as f_out:
                    f_out.write(content)

                os.remove(filename)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∂–∞—Ç–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")

    def cleanup_old_logs(self):
        try:
            log_dir = os.path.dirname(self.filename) or '.'
            files = [f for f in os.listdir(log_dir)
                    if f.startswith(os.path.basename(self.filename)) and f.endswith('.gz')]

            if len(files) > self.backup_count:
                files.sort(key=lambda x: os.path.getctime(os.path.join(log_dir, x)))
                for i in range(len(files) - self.backup_count):
                    os.remove(os.path.join(log_dir, files[i]))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
log_handler = SafeLogHandler(LOG_FILE_PATH, backup_count=7)

def auto_backup():
    backup_logger = logging.getLogger("auto_backup")
    db = SQLiteDatabase()

    while True:
        try:
            users = db.get_all_users()
            if not users:
                backup_logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±—ç–∫–∞–ø–∞")
                time_module.sleep(3600 * 4)
                continue

            backup_logger.info(f"–ù–∞—á–∞—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            for user_id in users:
                try:
                    db.create_backup(user_id)
                    backup_logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                except Exception as e:
                    backup_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –¥–ª—è {user_id}: {e}")

            time_module.sleep(3600 * 4)
        except Exception as e:
            backup_logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")
            time_module.sleep(3600)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫"""
    logger = logging.getLogger(__name__)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
    if isinstance(context.error, Conflict):
        logger.critical("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –∑–∞–ø—É—â–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)
    elif isinstance(context.error, NetworkError):
        logger.warning("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: %s", context.error)
    elif isinstance(context.error, TimedOut):
        logger.warning("–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %s", context.error)
    elif isinstance(context.error, RetryAfter):
        logger.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –û–∂–∏–¥–∞–µ–º %s —Å–µ–∫.", context.error.retry_after)
    else:
        logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: %s", context.error, exc_info=True)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    try:
        if ADMIN_ID:
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {context.error}\n\n"
                     f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {update}\n\n"
                     f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {context.error.__traceback__}"
            )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É: {e}")

def create_pid_file():
    """–°–æ–∑–¥–∞–µ—Ç PID-—Ñ–∞–π–ª"""
    pid = os.getpid()
    with open("bot.pid", "w", encoding="utf-8") as f:
        f.write(str(pid))

def remove_pid_file():
    """–£–¥–∞–ª—è–µ—Ç PID-—Ñ–∞–π–ª"""
    try:
        os.remove("bot.pid")
    except FileNotFoundError:
        pass

async def self_test(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    logger = logging.getLogger("self_test")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram
        me = await bot.get_me()
        logger.info(f"Self-test: –ë–æ—Ç @{me.username} –∞–∫—Ç–∏–≤–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if ADMIN_ID:
            await bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚úÖ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                     f"üÜî ID: {me.id}\n"
                     f"üë§ Username: @{me.username}\n"
                     f"üïí –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {dt.datetime.now()}"
            )
        return True
    except Exception as e:
        logger.error(f"Self-test failed: {e}")
        if ADMIN_ID:
            try:
                await bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"‚ùå –û—à–∏–±–∫–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}"
                )
            except:
                pass
        return False

async def periodic_health_check(bot: Bot, interval=3600):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
    logger = logging.getLogger("health_check")
    while True:
        try:
            await bot.get_me()  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            logger.debug("Health check: OK")
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            if ADMIN_ID:
                try:
                    await bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ—Ç–æ–º: {e}\n"
                             f"üïí –í—Ä–µ–º—è: {dt.datetime.now()}"
                    )
                except:
                    pass
        await asyncio.sleep(interval)

def main() -> None:
    logger = logging.getLogger(__name__)

    # –°–æ–∑–¥–∞–µ–º PID-—Ñ–∞–π–ª
    create_pid_file()
    atexit.register(remove_pid_file)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç–∞
    lock_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        lock_socket.bind(("127.0.0.1", 47200))
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç–∞: —É—Å–ø–µ—à–Ω–æ")
    except socket.error:
        logger.critical("–û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—Ç—É! –í–æ–∑–º–æ–∂–Ω–æ –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        sys.exit(1)
    finally:
        lock_socket.close()

    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
        state_file = os.path.abspath('conversation_states.pickle')
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: {state_file}")
        persistence = PicklePersistence(filepath=state_file)

        application = Application.builder() \
            .token(TOKEN) \
            .persistence(persistence) \
            .build()

        application.add_error_handler(error_handler)

        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                States.SELECTING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_date_selection)],
                States.SELECTING_WORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_work_selection)],
                States.SHOWER_WORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_work)],
                States.MIRROR_WORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_work)],
                States.OTHER_WORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_work)],
                States.ADDITIONAL_SERVICES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_additional)],
                States.MIRROR_QUANTITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_mirror_quantity)],
                States.ADD_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address)],
                States.ADD_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_comment)],
                States.ADD_MORE_WORK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_add_more)],
                States.VIEWING_ENTRIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_view_entries)],
                States.DELETING_ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_delete_entry)],
                States.SETTINGS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_settings)],
                States.SETTING_WORK_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_work_days)],
                States.CONFIRM_DELETE_LAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirm_delete_last)],
                States.CONFIRM_DELETE_ENTRY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirm_delete_entry)]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            name="main_conversation",
            persistent=True,
        )

        application.add_handler(conv_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        backup_thread = threading.Thread(target=auto_backup, daemon=True)
        backup_thread.start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        async def post_init(application: Application) -> None:
            bot = application.bot
            success = await self_test(bot)
            if success:
                logger.info("Self-test passed")
            else:
                logger.error("Self-test failed")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è
            asyncio.create_task(periodic_health_check(bot))

        application.post_init = post_init

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –æ—á–∏—Å—Ç–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        application.run_polling(
            drop_pending_updates=True,
            close_loop=False,
            allowed_updates=Update.ALL_TYPES
        )

    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if ADMIN_ID:
            try:
                bot = Bot(token=TOKEN)
                asyncio.run(bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}"
                ))
            except:
                pass

if __name__ == "__main__":
    # –î–ª—è Windows —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
    if sys.platform == "win32":
        import asyncio
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—É—â–∏–π
        loop = asyncio.ProactorEventLoop()
        asyncio.set_event_loop(loop)

    main()
